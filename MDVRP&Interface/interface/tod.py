from cbs_mapf.planner import Planner
from traffic import Traffic_Management
import traffic
import time
import multiprocessing as mp

PATH = [[[50, 21], [87, 19], [50, 21]], [[138, 36], [147, 13], [138, 36]],[[238, 21], [222, 36], [238, 21]],[[324, 39], [350, 28], [324, 39]], [[410, 18], [413, 46], [410, 18]], [[440, 86], [411, 97], [440, 86]]
, [[352, 119], [372, 137], [352, 119]], [[328, 193], [325, 226], [328, 193]], [[380, 255], [419, 244], [380, 255]], [[446, 185], [418, 168], [446, 185]], [[500, 123], [529, 147], [500, 123]]
, [[591, 17], [607, 33], [591, 17]], [[677, 33], [666, 50], [677, 33]], [[613, 72], [637, 88], [613, 72]], [[734, 79], [707, 99], [734, 79]], [[613, 137], [647, 149], [613, 137]]
, [[711, 161], [720, 192],[711, 161]], [[732, 255], [702, 281], [732, 255]], [[639, 219], [615, 237], [639, 219]], [[543, 264], [540, 291], [543, 264]], [[550, 425], [538, 391], [550, 425]],
 [[664, 395], [648, 420], [664, 395]], [[757, 461], [734, 446], [757, 461]], [[764, 574], [740, 535], [764, 574]], [[765, 667], [741, 645], [765, 667]], [[737, 743], [714, 720], [737, 743]]
,[[648, 758], [630, 726], [648, 758]], [[567, 731], [550, 705], [567, 731]], [[665, 675], [648, 650], [665, 675]], [[682, 564], [661, 594], [682, 564]], [[642, 478], [602, 477], [642, 478]], [[586, 528], [617, 552], [586, 528]], [[581, 619], [575, 588], [581, 619]]
, [[498, 579], [508, 598], [498, 579]], [[416, 655], [410, 632], [416, 655]],  [[178, 748], [202, 725], [178, 748]],[[55, 667], [86, 665], [55, 667]]
, [[102, 553], [76, 574], [102, 553]], [[83, 363], [49, 352], [83, 363]], [[128, 131], [142, 157], [128, 131]], [[243, 408], [212, 402], [243, 408]], [[383, 400], [420, 381], [383, 400]]
, [[398, 507], [422, 538], [398, 507]], [[310, 609], [315, 580], [310, 609]], [[193, 615], [224, 625], [193, 615]], [[244, 506], [214, 505], [244, 506]], [[361, 32], [384, 22], [361, 32]]
, [[488, 103], [465, 114], [488, 103]]

#Additional for test matc_plan()
, [[573, 400], [598, 401], [573, 400]], [[720, 510], [705, 533], [720, 510]], [[671, 690], [648, 678], [671, 690]], [[720, 510], [705, 533], [720, 510]],[[102, 574], [193, 575]],[[48, 655], [103, 720]]
,[[214, 641], [276, 720]],[[214, 641], [103, 720]],[[276, 720], [381, 651]],[[381, 651], [342, 549]],[[342, 549],[392, 507]],[[392, 507], [391, 441]],[[391, 441], [397, 345]],[ [281, 399], [218, 341]], [[74, 354], [69, 456]],
[[131, 193], [164, 94]], [[324, 84], [325, 150]], [[324, 84], [131, 193]],
[[715, 275], [709, 228]], [[535, 278], [534, 405]], [[586, 577], [446, 585]], [[259, 716], [257, 592]], [[449, 292], [333, 239]], [[499, 144], [700, 150]], [[709, 228], [715, 275]], 
[[452, 697], [446, 585]], [[586, 577], [534, 405]], [[594, 406], [540, 408]], [[586, 633], [586, 577]], [[534, 405], [594, 406]], [[763, 407], [594, 406]],  [[586, 577], [446, 585]]
,[[45,342],[730,370]],[[750,330],[410,450]],[[405,410],[50,355]]
]




MAP_PATH ='/home/natta/interface_ws/src/full_interface/config/map_example0.png'

F = [[[102, 574], [193, 575], [48, 655], [103, 720], [214, 641], [276, 720], [214, 641], [103, 720], [48, 655], [103, 720], [214, 641], [276, 720], [381, 651], [342, 549],
 [392, 507], [391, 441], [397, 345], [391, 441], [397, 345], [281, 399], [218, 341], [74, 354], [69, 456], [182, 415], [69, 456], [74, 354], [69, 456], [192, 496], [193, 575], [48, 655], 
 [103, 720], [214, 641], [103, 720], [48, 655], [193, 575], [192, 496], [193, 575], [102, 574], [193, 575], [48, 655], [103, 720], [214, 641], [276, 720], [214, 641], [103, 720], [48, 655], [103, 720], [214, 641], [276, 720], [381, 651], [342, 549],
 [392, 507], [391, 441], [397, 345], [391, 441], [397, 345], [281, 399], [218, 341], [74, 354], [69, 456], [182, 415], [69, 456], [74, 354], [69, 456], [192, 496], [193, 575], [48, 655], 
 [103, 720], [214, 641], [103, 720], [48, 655], [193, 575], [192, 496], [193, 575]]]

F1 = F[0][6:]
F2 = F[0][24:]


P = [F[0],F1,F2]
# print(f'agent ; {len(PATH)}')
print(f'lenght = {len(PATH[0])}')
def full():
    mm = Traffic_Management()
    traffic.GRID_SIZE = 4
    traffic.ROBOT_RADIUS = 2
    d =time.time()
    obs = mm.get_obstacle_ind(MAP_PATH)
    a = mm.full_plan(obs,PATH)
    # print(f'Answer : {(a)}')
    end0 = time.time() - d
    print('\n')
    print(f'full_plan: {end0}')

def matc():
    mm = Traffic_Management()
    traffic.GRID_SIZE = 12
    traffic.ROBOT_RADIUS = 8
    s = time.time()

    mm.initial(map_path=MAP_PATH,fleet=PATH)
    first_path = mm.matc_plan()
    # print(first_path)

    end = time.time() - s
    print('\n')
    print(f'matc: {end}')

print(f'agent : {len(PATH)}')
# f = mp.Process(target=full)
# m = mp.Process(target=matc)
# m.start()
# f.start()

full()